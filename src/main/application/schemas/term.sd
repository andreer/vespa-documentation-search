schema term {

    document term {
    
        field namespace type string {
            indexing: attribute|summary
            attribute: fast-search
            rank: filter
        } 

        field hash type int {
            indexing: summary
        }

        field term type string {
            indexing: summary | attribute
            attribute: fast-search 
        }

        field type type string {
            indexing: summary | attribute
        }

        field url type string {
            indexing: summary | attribute
        }

        field terms type array<string> {
            indexing: summary | attribute
            attribute: fast-search
        }

        field tokens type array<string> {
            indexing: summary | attribute
            attribute: fast-search
        }

        field corpus_count type int {
            indexing: summary | attribute
        }

        field document_count type int {
            indexing: summary | attribute
        }
    }

    document-summary suggestion {
        summary term {}
        summary namespace {}
        summary url {}
        summary type {}
    }

    fieldset default {
        fields: term, terms
    }

    field embedding type tensor<float>(x[384]) {
        indexing: "query: " .  input term | embed | attribute
        attribute {
            distance-metric: angular
        }
    }

    rank-profile term_rank inherits default {
        inputs {
            query(matchWeight) : 1.0
            query(q) tensor<float>(x[384])
        }
        function semantic() {
            expression: max(0, cos(distance(field, embedding)))
        }
        function matchScore() {
            expression: (2*attributeMatch(term) + attributeMatch(tokens) + attributeMatch(terms))/4.
        }
        function popularityScore() {
            expression: sigmoid(attribute(document_count))
        }
        first-phase {
            expression {
                query(matchWeight)*matchScore + (1 - query(matchWeight))*popularityScore + semantic
            }
        }
        match-features {
            attributeMatch(tokens).completeness
            attributeMatch(tokens).queryCompleteness
            attribute(corpus_count)
            attributeMatch(term)
            attributeMatch(tokens)
            attributeMatch(terms)
            query(matchWeight)
            matchScore
            semantic
            popularityScore
        }
    }

}
