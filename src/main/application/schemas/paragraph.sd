schema paragraph {

    field language type string {
        indexing: "en" | set_language
    }

    document paragraph {

        field path type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }
        
         field base_uri type string {
            indexing: summary
        }

        field doc_id type string {
            indexing: summary | attribute
        }

        field title type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        field content type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }
        
        field questions type array<string> {
            indexing: summary | index | attribute # Attribute for grouping
            index: enable-bm25
            stemming: best
        }
        
        field content_tokens type int {
            indexing: summary
        }

        # e.g. open, cloud
        field namespace type string {
            indexing: summary | attribute
        }

        field last_updated type int {
            indexing: summary | attribute
        }

        field selfhosted type bool {
            indexing: summary | attribute
        }
    }

    field questions_exact type array<string> {
        indexing: input questions | index
        match: word
    }

    field embedding type tensor<float>(x[384]) {
        indexing: "passage: " . (input title || "") . " " . (input content || "") | embed | attribute
        attribute {
            distance-metric: angular
        }
    }

    field question_embedding type tensor<float>(q{}, x[384]) {
         indexing {
            input questions |
                for_each { "query: " . _ } | embed | attribute
         }

         attribute {
            distance-metric: angular
         }
    }

    document-summary short-summary {
        from-disk
        summary title type string {}
        summary content type string {}
        summary path type string {}
        summary doc_id type string {}
    }

    fieldset default {
        fields: title, content, path, questions
    }

    rank-profile semantic inherits default {
        inputs {
            query(q) tensor<float>(x[384])
        }
        first-phase {
            expression: cos(distance(field,embedding))
        }
    }

    rank-profile hybrid inherits semantic {
        inputs {
            query(q) tensor<float>(x[384])
            query(sw) double: 0.6
            query(ew) double: 0.2
        }

        function semantic() {
            expression: cos(distance(field, embedding))
        }
        function semantic_question() {
            expression: max(cos(distance(field, question_embedding)), 0)
        }
        function keywords() {
            expression: (nativeRank(title) + nativeRank(content) + 0.5*nativeRank(path) + query(ew)*elementCompleteness(questions).completeness)/4 + elementCompleteness(questions_exact).completeness
        }
        first-phase {
            expression: query(sw)*(semantic_question + semantic) + (1 - query(sw))*keywords
        }
        match-features: keywords semantic semantic_question nativeRank(title) nativeRank(content) nativeRank(path) elementCompleteness(questions).completeness elementCompleteness(questions_exact).completeness
    }
}
