schema threaded_message {

    document threaded_message {
        field threaded_message_id type string {
            indexing: summary | attribute| index
        }

        field thread_ref type reference<thread> {
            indexing: summary | attribute
        }

        field text type string {
            indexing: summary | attribute | index
            index: enable-bm25
        }

        field user_id type string {
            indexing: summary | attribute
        }

        field edited type bool {
            indexing: summary
        }
    }


  field text_embedding type tensor<float>(x[384]) {
       indexing: "phrase: " . (input text || "") | embed | attribute
       attribute {
           distance-metric: angular
       }
   }


    fieldset default {
        fields: text
    }

    fieldset thread_id {
        fields: thread_id
    }

    import field thread_ref.thread_id as thread_id {}
    import field thread_ref.user_id as parent_user_id {}


    document-summary short-summary {
        from-disk
        summary text {}
        summary thread_ref {}
    }

     rank-profile hybrid2thread {
        inputs {
            query(q) tensor<float>(x[384])
            query(semantic_weight) double: 0.6
        }
        function scale(val) {
            expression: 2*atan(val/4)/(3.14159)
        }

         function semantic_combined() {
            expression:max(cos(distance(field, text_embedding)),0)
         }

         function keywords() {
            expression: scale(bm25(text))
         }

         first-phase {
            expression {
                query(semantic_weight)*semantic_combined + (1 - query(semantic_weight))*keywords
            }
            rank-score-drop-limit: 0.0
         }
         match-features {
            queryTermCount
            keywords
            bm25(text)
            semantic_combined
         }
     }
}
