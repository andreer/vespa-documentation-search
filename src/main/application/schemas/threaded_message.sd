schema threaded_message {

    field language type string {
        indexing: "en" | set_language
    }

    document threaded_message {
        field threaded_message_id type string {
            indexing: summary | attribute | index
        }

        field thread_ref type reference<thread> {
            indexing: summary | attribute
        }

        field text type string {
            indexing: summary | attribute | index
            index: enable-bm25
            stemming: best
        }

        field user_id type string {
            indexing: summary | attribute
        }

        field edited type bool {
            indexing: summary
        }

        field feedback_positive type int {
            indexing: summary | attribute
        }

        field feedback_negative type int {
            indexing: summary | attribute
        }
    }

    field text_embedding type tensor<float>(x[384]) {
        indexing: input text | embed embedder | attribute | index
        attribute {
            distance-metric: angular
        }
    }

    fieldset default {
        fields: text
    }

    fieldset thread_id {
        fields: threaded_message_id
    }

    import field thread_ref.thread_id as thread_id {}
    import field thread_ref.user_id as parent_user_id {}

    document-summary short-summary {
        summary text {}
        summary thread_ref {}
    }

    rank-profile hybrid2 {
        inputs {
            query(q) tensor<float>(x[384])
            query(semantic_weight) double: 0.7
        }

        function scale(val) {
            expression: 2 * atan(val / 4) / 3.14159
        }

       function semantic_text() {
           expression: cos(distance(field, text_embedding))
       }

        function scaled_bm25_text() {
            expression: scale(bm25(text))
        }

        function normalized_difference(p,n) {
            expression: 0.5 * if(p==0&&n==0, 0, (p-n)/(p+n)) + 0.5 # from 0 to 1 and 0.5 if there are no feedback yet.
        }

        function normalized_difference_feedback() {
            expression: normalized_difference(attribute(feedback_positive), attribute(feedback_negative))
        }

        first-phase {
            expression: (query(semantic_weight) * semantic_text + (1 - query(semantic_weight)) * scaled_bm25_text) * 0.9 + 0.1 * normalized_difference_feedback
            rank-score-drop-limit: 0.0
        }

        match-features {
            scaled_bm25_text
            semantic_text
            normalized_difference_feedback
        }
    }
}
